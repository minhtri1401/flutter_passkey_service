// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.example.flutter_passkey_service

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import kotlinx.serialization.Serializable
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object MessagesPigeonUtils {

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Predefined error types for consistent error handling across platforms */
enum class PasskeyErrorType(val raw: Int) {
  INVALID_PARAMETERS(0),
  MISSING_REQUIRED_FIELD(1),
  INVALID_FORMAT(2),
  DECODING_CHALLENGE(3),
  USER_CANCELLED(4),
  USER_TIMEOUT(5),
  USER_OPTED_OUT(6),
  INSUFFICIENT_PERMISSIONS(7),
  SECURITY_VIOLATION(8),
  NOT_ALLOWED(9),
  DOMAIN_NOT_ASSOCIATED(10),
  NO_CREDENTIALS_AVAILABLE(11),
  CREDENTIAL_NOT_FOUND(12),
  INVALID_CREDENTIAL(13),
  CREDENTIAL_ALREADY_EXISTS(14),
  INVALID_RESPONSE(15),
  NOT_HANDLED(16),
  FAILED(17),
  PLATFORM_NOT_SUPPORTED(18),
  OPERATION_NOT_SUPPORTED(19),
  SYSTEM_ERROR(20),
  NETWORK_ERROR(21),
  DOM_ERROR(22),
  WEBAUTHN_ERROR(23),
  ATTESTATION_ERROR(24),
  EXCLUDE_CREDENTIALS_MATCH(25),
  UNEXPECTED_AUTHORIZATION_RESPONSE(26),
  WK_ERROR_DOMAIN(27),
  UNKNOWN_ERROR(28),
  UNEXPECTED_ERROR(29);

  companion object {
    fun ofRaw(raw: Int): PasskeyErrorType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Represents a standardized passkey exception that can be thrown across platforms
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
@Serializable
data class  PasskeyException (
  /** Error type identifying the specific type of error */
  val errorType: PasskeyErrorType,
  /** Human-readable error message describing what went wrong */
  val message: String,
  /** Optional additional details about the error */
  val details: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PasskeyException {
      val errorType = pigeonVar_list[0] as PasskeyErrorType
      val message = pigeonVar_list[1] as String
      val details = pigeonVar_list[2] as String
      return PasskeyException(errorType, message, details)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      errorType,
      message,
      details,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PasskeyException) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Represents the response data for authentication generation options
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
@Serializable
data class  AuthGenerateOptionResponseData (
  /** The relying party identifier */
  val rpId: String,
  /** The challenge string */
  val challenge: String,
  /** List of allowed credentials */
  val allowCredentials: List<AuthGenerateOptionAllowCredential>,
  /** Timeout value in milliseconds */
  val timeout: Long,
  /** User verification requirement */
  val userVerification: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AuthGenerateOptionResponseData {
      val rpId = pigeonVar_list[0] as String
      val challenge = pigeonVar_list[1] as String
      val allowCredentials = pigeonVar_list[2] as List<AuthGenerateOptionAllowCredential>
      val timeout = pigeonVar_list[3] as Long
      val userVerification = pigeonVar_list[4] as String
      return AuthGenerateOptionResponseData(rpId, challenge, allowCredentials, timeout, userVerification)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      rpId,
      challenge,
      allowCredentials,
      timeout,
      userVerification,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is AuthGenerateOptionResponseData) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Represents an allowed credential for authentication
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
@Serializable
data class  AuthGenerateOptionAllowCredential (
  /** The credential identifier */
  val id: String,
  /** The credential type */
  val type: String,
  /** List of transport methods */
  val transports: List<String>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AuthGenerateOptionAllowCredential {
      val id = pigeonVar_list[0] as String
      val type = pigeonVar_list[1] as String
      val transports = pigeonVar_list[2] as List<String>
      return AuthGenerateOptionAllowCredential(id, type, transports)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      type,
      transports,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is AuthGenerateOptionAllowCredential) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Represents the response data for authentication verification
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
@Serializable
data class  AuthVerifyResponse (
  /** Whether the authentication was verified */
  val verified: Boolean,
  /** Access token for authenticated session */
  val accessToken: String,
  /** User information (optional) */
  val user: User? = null,
  /** Refresh token for session renewal */
  val refreshToken: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AuthVerifyResponse {
      val verified = pigeonVar_list[0] as Boolean
      val accessToken = pigeonVar_list[1] as String
      val user = pigeonVar_list[2] as User?
      val refreshToken = pigeonVar_list[3] as String
      return AuthVerifyResponse(verified, accessToken, user, refreshToken)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      verified,
      accessToken,
      user,
      refreshToken,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is AuthVerifyResponse) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Represents user information
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
@Serializable
data class  User (
  /** User identifier */
  val id: String,
  /** Username */
  val username: String,
  /** Phone number (optional) */
  val phone: String? = null,
  /** Email address (optional) */
  val email: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): User {
      val id = pigeonVar_list[0] as String
      val username = pigeonVar_list[1] as String
      val phone = pigeonVar_list[2] as String?
      val email = pigeonVar_list[3] as String?
      return User(id, username, phone, email)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      username,
      phone,
      email,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is User) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Represents the response data for creating a passkey
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
@Serializable
data class  CreatePasskeyResponseData (
  /** Raw identifier */
  val rawId: String,
  /** Authenticator attachment type */
  val authenticatorAttachment: String,
  /** Type of credential */
  val type: String,
  /** Credential identifier */
  val id: String,
  /** Response data from passkey creation */
  val response: CreatePasskeyResponse,
  /** Client extension results */
  val clientExtensionResults: CreatePasskeyExtension,
  /** Username associated with the passkey */
  val username: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): CreatePasskeyResponseData {
      val rawId = pigeonVar_list[0] as String
      val authenticatorAttachment = pigeonVar_list[1] as String
      val type = pigeonVar_list[2] as String
      val id = pigeonVar_list[3] as String
      val response = pigeonVar_list[4] as CreatePasskeyResponse
      val clientExtensionResults = pigeonVar_list[5] as CreatePasskeyExtension
      val username = pigeonVar_list[6] as String
      return CreatePasskeyResponseData(rawId, authenticatorAttachment, type, id, response, clientExtensionResults, username)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      rawId,
      authenticatorAttachment,
      type,
      id,
      response,
      clientExtensionResults,
      username,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is CreatePasskeyResponseData) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Represents the response from passkey creation
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
@Serializable
data class  CreatePasskeyResponse (
  /** Client data JSON */
  val clientDataJSON: String,
  /** Attestation object */
  val attestationObject: String,
  /** List of transport methods */
  val transports: List<String>,
  /** Authenticator data */
  val authenticatorData: String,
  /** Public key algorithm identifier */
  val publicKeyAlgorithm: Long,
  /** Public key */
  val publicKey: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): CreatePasskeyResponse {
      val clientDataJSON = pigeonVar_list[0] as String
      val attestationObject = pigeonVar_list[1] as String
      val transports = pigeonVar_list[2] as List<String>
      val authenticatorData = pigeonVar_list[3] as String
      val publicKeyAlgorithm = pigeonVar_list[4] as Long
      val publicKey = pigeonVar_list[5] as String
      return CreatePasskeyResponse(clientDataJSON, attestationObject, transports, authenticatorData, publicKeyAlgorithm, publicKey)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      clientDataJSON,
      attestationObject,
      transports,
      authenticatorData,
      publicKeyAlgorithm,
      publicKey,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is CreatePasskeyResponse) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Represents client extension results for passkey creation
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
@Serializable
data class  CreatePasskeyExtension (
  /** Credential properties extension (optional) */
  val credProps: CreatePasskeyExtensionProps? = null,
  /** PRF extension (optional) */
  val prf: CreatePasskeyExtensionPrf? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): CreatePasskeyExtension {
      val credProps = pigeonVar_list[0] as CreatePasskeyExtensionProps?
      val prf = pigeonVar_list[1] as CreatePasskeyExtensionPrf?
      return CreatePasskeyExtension(credProps, prf)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      credProps,
      prf,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is CreatePasskeyExtension) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Represents PRF extension properties
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
@Serializable
data class  CreatePasskeyExtensionPrf (
  /** Enabled flag */
  val rk: Boolean
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): CreatePasskeyExtensionPrf {
      val rk = pigeonVar_list[0] as Boolean
      return CreatePasskeyExtensionPrf(rk)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      rk,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is CreatePasskeyExtensionPrf) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Represents credential properties extension
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
@Serializable
data class  CreatePasskeyExtensionProps (
  /** Resident key flag */
  val rk: Boolean
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): CreatePasskeyExtensionProps {
      val rk = pigeonVar_list[0] as Boolean
      return CreatePasskeyExtensionProps(rk)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      rk,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is CreatePasskeyExtensionProps) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Represents the response data for passkey authentication
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
@Serializable
data class  GetPasskeyAuthenticationResponseData (
  /** Authenticator attachment type */
  val authenticatorAttachment: String,
  /** Credential identifier */
  val id: String,
  /** Raw identifier */
  val rawId: String,
  /** Authentication response data */
  val response: GetPasskeyAuthenticationResponse,
  /** Type of credential */
  val type: String,
  /** Username associated with the passkey */
  val username: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): GetPasskeyAuthenticationResponseData {
      val authenticatorAttachment = pigeonVar_list[0] as String
      val id = pigeonVar_list[1] as String
      val rawId = pigeonVar_list[2] as String
      val response = pigeonVar_list[3] as GetPasskeyAuthenticationResponse
      val type = pigeonVar_list[4] as String
      val username = pigeonVar_list[5] as String
      return GetPasskeyAuthenticationResponseData(authenticatorAttachment, id, rawId, response, type, username)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      authenticatorAttachment,
      id,
      rawId,
      response,
      type,
      username,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is GetPasskeyAuthenticationResponseData) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Represents the authentication response from passkey
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
@Serializable
data class  GetPasskeyAuthenticationResponse (
  /** Client data JSON */
  val clientDataJSON: String,
  /** Authenticator data */
  val authenticatorData: String,
  /** Digital signature */
  val signature: String,
  /** User handle */
  val userHandle: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): GetPasskeyAuthenticationResponse {
      val clientDataJSON = pigeonVar_list[0] as String
      val authenticatorData = pigeonVar_list[1] as String
      val signature = pigeonVar_list[2] as String
      val userHandle = pigeonVar_list[3] as String
      return GetPasskeyAuthenticationResponse(clientDataJSON, authenticatorData, signature, userHandle)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      clientDataJSON,
      authenticatorData,
      signature,
      userHandle,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is GetPasskeyAuthenticationResponse) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Represents the data for generating registration options
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
@Serializable
data class RegisterGenerateOptionData (
  /** Challenge string */
  val challenge: String,
  /** Relying party information */
  val rp: RegisterGenerateOptionRp,
  /** User information */
  val user: RegisterGenerateOptionUser,
  /** Public key credential parameters */
  val pubKeyCredParams: List<RegisterGenerateOptionPublicKeyParams>,
  /** Timeout value in milliseconds */
  val timeout: Long,
  /** Attestation preference */
  val attestation: String,
  /** Credentials to exclude from registration */
  val excludeCredentials: List<RegisterGenerateOptionExcludeCredential>,
  /** Authenticator selection criteria */
  val authenticatorSelection: RegisterGenerateOptionAuthenticatorSelection,
  /** Extensions for registration */
  val extensions: RegisterGenerateOptionExtension
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): RegisterGenerateOptionData {
      val challenge = pigeonVar_list[0] as String
      val rp = pigeonVar_list[1] as RegisterGenerateOptionRp
      val user = pigeonVar_list[2] as RegisterGenerateOptionUser
      val pubKeyCredParams = pigeonVar_list[3] as List<RegisterGenerateOptionPublicKeyParams>
      val timeout = pigeonVar_list[4] as Long
      val attestation = pigeonVar_list[5] as String
      val excludeCredentials = pigeonVar_list[6] as List<RegisterGenerateOptionExcludeCredential>
      val authenticatorSelection = pigeonVar_list[7] as RegisterGenerateOptionAuthenticatorSelection
      val extensions = pigeonVar_list[8] as RegisterGenerateOptionExtension
      return RegisterGenerateOptionData(challenge, rp, user, pubKeyCredParams, timeout, attestation, excludeCredentials, authenticatorSelection, extensions)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      challenge,
      rp,
      user,
      pubKeyCredParams,
      timeout,
      attestation,
      excludeCredentials,
      authenticatorSelection,
      extensions,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is RegisterGenerateOptionData) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Represents a credential to exclude from registration
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
@Serializable
data class  RegisterGenerateOptionExcludeCredential (
  /** Credential identifier */
  val id: String,
  /** Credential type */
  val type: String,
  /** List of transport methods */
  val transports: List<String>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): RegisterGenerateOptionExcludeCredential {
      val id = pigeonVar_list[0] as String
      val type = pigeonVar_list[1] as String
      val transports = pigeonVar_list[2] as List<String>
      return RegisterGenerateOptionExcludeCredential(id, type, transports)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      type,
      transports,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is RegisterGenerateOptionExcludeCredential) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Represents relying party information for registration
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
@Serializable
data class  RegisterGenerateOptionRp (
  /** Relying party name */
  val name: String,
  /** Relying party identifier */
  val id: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): RegisterGenerateOptionRp {
      val name = pigeonVar_list[0] as String
      val id = pigeonVar_list[1] as String
      return RegisterGenerateOptionRp(name, id)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      name,
      id,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is RegisterGenerateOptionRp) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Represents user information for registration
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
@Serializable
data class  RegisterGenerateOptionUser (
  /** User identifier */
  val id: String,
  /** User name */
  val name: String,
  /** Display name (defaults to empty string) */
  val displayName: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): RegisterGenerateOptionUser {
      val id = pigeonVar_list[0] as String
      val name = pigeonVar_list[1] as String
      val displayName = pigeonVar_list[2] as String
      return RegisterGenerateOptionUser(id, name, displayName)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      name,
      displayName,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is RegisterGenerateOptionUser) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Represents public key credential parameters
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
@Serializable
data class  RegisterGenerateOptionPublicKeyParams (
  /** Algorithm identifier */
  val alg: Long,
  /** Credential type */
  val type: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): RegisterGenerateOptionPublicKeyParams {
      val alg = pigeonVar_list[0] as Long
      val type = pigeonVar_list[1] as String
      return RegisterGenerateOptionPublicKeyParams(alg, type)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      alg,
      type,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is RegisterGenerateOptionPublicKeyParams) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Represents authenticator selection criteria
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
@Serializable
data class  RegisterGenerateOptionAuthenticatorSelection (
  /** Resident key requirement */
  val residentKey: String,
  /** User verification requirement */
  val userVerification: String,
  /** Whether resident key is required */
  val requireResidentKey: Boolean,
  /** Authenticator attachment preference */
  val authenticatorAttachment: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): RegisterGenerateOptionAuthenticatorSelection {
      val residentKey = pigeonVar_list[0] as String
      val userVerification = pigeonVar_list[1] as String
      val requireResidentKey = pigeonVar_list[2] as Boolean
      val authenticatorAttachment = pigeonVar_list[3] as String
      return RegisterGenerateOptionAuthenticatorSelection(residentKey, userVerification, requireResidentKey, authenticatorAttachment)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      residentKey,
      userVerification,
      requireResidentKey,
      authenticatorAttachment,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is RegisterGenerateOptionAuthenticatorSelection) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Represents extensions for registration
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
@Serializable
data class  RegisterGenerateOptionExtension (
  /** Credential properties extension */
  val credProps: Boolean
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): RegisterGenerateOptionExtension {
      val credProps = pigeonVar_list[0] as Boolean
      return RegisterGenerateOptionExtension(credProps)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      credProps,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is RegisterGenerateOptionExtension) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Represents the response data for registration verification
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
@Serializable
data class  RegisterVerifyResponse (
  /** Whether the registration was verified */
  val verified: Boolean,
  /** Access token for authenticated session */
  val accessToken: String,
  /** User information */
  val user: User,
  /** Refresh token for session renewal */
  val refreshToken: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): RegisterVerifyResponse {
      val verified = pigeonVar_list[0] as Boolean
      val accessToken = pigeonVar_list[1] as String
      val user = pigeonVar_list[2] as User
      val refreshToken = pigeonVar_list[3] as String
      return RegisterVerifyResponse(verified, accessToken, user, refreshToken)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      verified,
      accessToken,
      user,
      refreshToken,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is RegisterVerifyResponse) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class MessagesPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PasskeyErrorType.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PasskeyException.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AuthGenerateOptionResponseData.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AuthGenerateOptionAllowCredential.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AuthVerifyResponse.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          User.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CreatePasskeyResponseData.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CreatePasskeyResponse.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CreatePasskeyExtension.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CreatePasskeyExtensionPrf.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CreatePasskeyExtensionProps.fromList(it)
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          GetPasskeyAuthenticationResponseData.fromList(it)
        }
      }
      141.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          GetPasskeyAuthenticationResponse.fromList(it)
        }
      }
      142.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          RegisterGenerateOptionData.fromList(it)
        }
      }
      143.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          RegisterGenerateOptionExcludeCredential.fromList(it)
        }
      }
      144.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          RegisterGenerateOptionRp.fromList(it)
        }
      }
      145.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          RegisterGenerateOptionUser.fromList(it)
        }
      }
      146.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          RegisterGenerateOptionPublicKeyParams.fromList(it)
        }
      }
      147.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          RegisterGenerateOptionAuthenticatorSelection.fromList(it)
        }
      }
      148.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          RegisterGenerateOptionExtension.fromList(it)
        }
      }
      149.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          RegisterVerifyResponse.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PasskeyErrorType -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is PasskeyException -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is AuthGenerateOptionResponseData -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is AuthGenerateOptionAllowCredential -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is AuthVerifyResponse -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is User -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is CreatePasskeyResponseData -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is CreatePasskeyResponse -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is CreatePasskeyExtension -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is CreatePasskeyExtensionPrf -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is CreatePasskeyExtensionProps -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      is GetPasskeyAuthenticationResponseData -> {
        stream.write(140)
        writeValue(stream, value.toList())
      }
      is GetPasskeyAuthenticationResponse -> {
        stream.write(141)
        writeValue(stream, value.toList())
      }
      is RegisterGenerateOptionData -> {
        stream.write(142)
        writeValue(stream, value.toList())
      }
      is RegisterGenerateOptionExcludeCredential -> {
        stream.write(143)
        writeValue(stream, value.toList())
      }
      is RegisterGenerateOptionRp -> {
        stream.write(144)
        writeValue(stream, value.toList())
      }
      is RegisterGenerateOptionUser -> {
        stream.write(145)
        writeValue(stream, value.toList())
      }
      is RegisterGenerateOptionPublicKeyParams -> {
        stream.write(146)
        writeValue(stream, value.toList())
      }
      is RegisterGenerateOptionAuthenticatorSelection -> {
        stream.write(147)
        writeValue(stream, value.toList())
      }
      is RegisterGenerateOptionExtension -> {
        stream.write(148)
        writeValue(stream, value.toList())
      }
      is RegisterVerifyResponse -> {
        stream.write(149)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/**
 * Host API for passkey operations from Flutter to native platforms
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface PasskeyHostApi {
  /** Registers a new passkey credential */
  fun register(options: RegisterGenerateOptionData, callback: (Result<CreatePasskeyResponseData>) -> Unit)
  /** Authenticates with an existing passkey */
  fun authenticate(request: AuthGenerateOptionResponseData, callback: (Result<GetPasskeyAuthenticationResponseData>) -> Unit)

  companion object {
    /** The codec used by PasskeyHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
    /** Sets up an instance of `PasskeyHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: PasskeyHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_passkey_service.PasskeyHostApi.register$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val optionsArg = args[0] as RegisterGenerateOptionData
            api.register(optionsArg) { result: Result<CreatePasskeyResponseData> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(MessagesPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(MessagesPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_passkey_service.PasskeyHostApi.authenticate$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as AuthGenerateOptionResponseData
            api.authenticate(requestArg) { result: Result<GetPasskeyAuthenticationResponseData> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(MessagesPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(MessagesPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
